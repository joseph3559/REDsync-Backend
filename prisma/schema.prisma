generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:scott@localhost:5432/redsync"
}

model AISettings {
  id                  String   @id @default(uuid())
  openAiKey           String
  model               String
  confidenceThreshold Float    @default(0.0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  module    String
  timestamp DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])

  @@index([module])
  @@index([timestamp])
  @@index([userId])
}

model COASettings {
  id                   String   @id @default(uuid())
  defaultColumnMapping Json?
  extractionRules      Json?
  fileProcessingLimits Json?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Certification {
  id        String    @id @default(uuid())
  name      String
  details   String?
  validFrom DateTime?
  validTo   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CoaRecord {
  id                   String   @id @default(uuid())
  fileName             String
  sampleId             String?
  batchId              String?
  extractionPhase      Int      @default(1)
  ai                   String?
  av                   String?
  pov                  String?
  colorGardner10       String?
  viscosity25          String?
  hexaneInsolubles     String?
  moisture             String?
  lead                 String?
  mercury              String?
  arsenic              String?
  iron                 String?
  enterobacteriaceae   String?
  totalPlateCount      String?
  yeastsMolds          String?
  yeasts               String?
  moulds               String?
  salmonella25g        String?
  salmonella250g       String?
  eColi                String?
  listeria25g          String?
  pc                   String?
  pe                   String?
  lpc                  String?
  pa                   String?
  pi                   String?
  p                    String?
  pl                   String?
  pah4                 String?
  ochratoxinA          String?
  pesticides           String?
  heavyMetals          String?
  peanutContent        String?
  gmoTest              String?
  colorGardnerAsIs     String?
  colorIodine          String?
  tolueneInsolubles    String?
  specificGravity      String?
  ffaAtLoading         String?
  iodineValue          String?
  soapContent          String?
  insolubleMatter      String?
  moistureInsolubles   String?
  additionalFields     Json?
  userId               String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  bacillusCereus       String?
  coliforms            String?
  mohMoshMoah          String?
  soyAllergen          String?
  cronobacterSpp       String?
  sumDioxinsDlPcbsTeq  String?
  sumDioxinsWhoPcddTeq String?
  sumPcb28To180        String?
  User                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([batchId])
  @@index([createdAt])
  @@index([sampleId])
  @@index([userId])
}

model CompanyInfo {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  address       String?
  city          String?
  companyName   String?
  contactPerson String?
  country       String?
  email         String?
  logoPath      String?
  phone         String?
  postalCode    String?
}

model ImportExportRecord {
  id               String   @id @default(uuid())
  sourceFile       String
  flow             String
  hsCode           String?
  productName      String?
  importerExporter String?
  quantity         Float?
  price            Float?
  incoterm         String?
  currency         String?
  competitorName   String?
  matchedProduct   String?
  matchConfidence  Float?
  rawText          String?
  metadata         Json?
  userId           String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  company          String?

  @@index([company])
  @@index([createdAt])
  @@index([flow])
  @@index([hsCode])
}

model ImportExportSettings {
  id                  String   @id @default(uuid())
  hsCodes             String[]
  competitorMapping   Json?
  currencyPreferences Json?
  filterPresets       Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Questionnaire {
  id                  String                @id @default(uuid())
  originalFile        String
  processedFile       String?
  status              String                @default("uploaded")
  metadata            Json?
  userId              String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  User                User?                 @relation(fields: [userId], references: [id])
  QuestionnaireAnswer QuestionnaireAnswer[]

  @@index([createdAt])
  @@index([status])
}

model QuestionnaireAnswer {
  id              String        @id @default(uuid())
  questionnaireId String
  question        String
  answer          String?
  source          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)

  @@index([questionnaireId])
}

model QuestionnaireSettings {
  id                String   @id @default(uuid())
  predefinedAnswers Json?
  skipLogicRules    Json?
  certifications    String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model SystemPreferences {
  id                  String   @id @default(uuid())
  dateFormat          String
  language            String
  defaultExportFormat String
  backupConfig        Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  password      String
  role          String          @default("admin")
  status        UserStatus      @default(pending)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String?
  AuditLog      AuditLog[]
  CoaRecord     CoaRecord[]
  Questionnaire Questionnaire[]
}

enum UserStatus {
  pending
  approved
  rejected
}
